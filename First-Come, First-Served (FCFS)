import random

# Constants
NUM_PROCESSES = 20
MAX_ARRIVAL_TIME = 20  # Maximum random arrival time
MAX_BURST_TIME = 10  # Maximum random burst time
TIME_LIMIT = 100  # Maximum simulation time for throughput calculation


# Generate 20 random processes with random arrival and burst times
class Process:
    def __init__(self, pid, arrival_time, burst_time):
        self.pid = pid
        self.arrival_time = arrival_time
        self.burst_time = burst_time
        self.waiting_time = 0
        self.turnaround_time = 0


# Generate processes
def generate_processes(num_processes):
    processes = []
    for i in range(num_processes):
        arrival_time = random.randint(0, MAX_ARRIVAL_TIME)
        burst_time = random.randint(1, MAX_BURST_TIME)
        processes.append(Process(i + 1, arrival_time, burst_time))
    return processes


# FCFS Scheduling
def fcfs_scheduling(processes):
    def get_arrival_time(p):
        return p.arrival_time

    processes.sort(key=get_arrival_time)

    time = 0
    completed_processes = 0
    total_waiting_time = 0
    total_turnaround_time = 0
    cpu_active_time = 0

    for process in processes:
        if time < process.arrival_time:
            time = process.arrival_time  # If CPU is idle, wait for the process to arrive

        # Calculate waiting time and turnaround time
        process.waiting_time = time - process.arrival_time
        process.turnaround_time = process.waiting_time + process.burst_time

        # Update total times
        total_waiting_time += process.waiting_time
        total_turnaround_time += process.turnaround_time

        # CPU works on the current process
        time += process.burst_time
        cpu_active_time += process.burst_time
        completed_processes += 1

        # Print process details
        print(f"Process {process.pid}: Arrival Time = {process.arrival_time}, "
              f"Burst Time = {process.burst_time}, Waiting Time = {process.waiting_time}, "
              f"Turnaround Time = {process.turnaround_time}")

    # Calculate metrics
    avg_waiting_time = total_waiting_time / NUM_PROCESSES
    avg_turnaround_time = total_turnaround_time / NUM_PROCESSES
    cpu_utilization = (cpu_active_time / time) * 100  # Percentage of time CPU is active
    throughput = completed_processes / TIME_LIMIT  # Number of processes completed per time unit

    # Output metrics
    print("\nFCFS Scheduling Results:")
    print(f"Average Waiting Time: {avg_waiting_time:.2f} ms")
    print(f"Average Turnaround Time: {avg_turnaround_time:.2f} ms")
    print(f"CPU Utilization: {cpu_utilization:.2f}%")
    print(f"Throughput: {throughput:.2f} processes per unit time")


# Main function to run the simulation
def main():
    processes = generate_processes(NUM_PROCESSES)
    fcfs_scheduling(processes)


if __name__ == "__main__":
    main()
