import random

# Process class to store process information
class Process:
    def __init__(self, pid, arrival_time, burst_time):
        self.pid = pid
        self.arrival_time = arrival_time
        self.burst_time = burst_time
        self.start_time = 0
        self.completion_time = 0
        self.turnaround_time = 0
        self.waiting_time = 0

# Generate random processes
def generate_processes(num_processes):
    processes = []
    for i in range(num_processes):
        arrival_time = random.randint(0, 20)  # Random arrival time between 0 and 20 ms
        burst_time = random.randint(1, 10)    # Random burst time between 1 and 10 ms
        processes.append(Process(i + 1, arrival_time, burst_time))
    return processes

# First Come First Serve (FCFS) Scheduling Algorithm
def fcfs_scheduling(processes):
    processes.sort(key=lambda p: p.arrival_time)  # Sort by arrival time
    current_time = 0
    total_waiting_time = 0
    total_turnaround_time = 0
    
    for process in processes:
        if current_time < process.arrival_time:
            current_time = process.arrival_time  # CPU is idle until the process arrives
        
        process.start_time = current_time
        process.completion_time = current_time + process.burst_time
        process.turnaround_time = process.completion_time - process.arrival_time
        process.waiting_time = process.turnaround_time - process.burst_time
        
        total_turnaround_time += process.turnaround_time
        total_waiting_time += process.waiting_time
        
        current_time = process.completion_time  # Update the current time
    
    avg_turnaround_time = total_turnaround_time / len(processes)
    avg_waiting_time = total_waiting_time / len(processes)
    cpu_utilization = (sum([p.burst_time for p in processes]) / current_time) * 100
    throughput = len(processes) / current_time
    
    return avg_turnaround_time, avg_waiting_time, cpu_utilization, throughput

# Display the process details
def display_processes(processes):
    print(f"{'PID':<5}{'Arrival':<10}{'Burst':<10}{'Start':<10}{'Completion':<15}{'Turnaround':<15}{'Waiting':<10}")
    for process in processes:
        print(f"{process.pid:<5}{process.arrival_time:<10}{process.burst_time:<10}{process.start_time:<10}{process.completion_time:<15}{process.turnaround_time:<15}{process.waiting_time:<10}")

# Simulate FCFS scheduling with 20 processes
processes = generate_processes(20)
avg_turnaround_time, avg_waiting_time, cpu_utilization, throughput = fcfs_scheduling(processes)

# Display the processes and performance metrics
display_processes(processes)

# Print performance metrics
print(f"\nPerformance Metrics:")
print(f"Average Turnaround Time: {avg_turnaround_time:.2f} ms")
print(f"Average Waiting Time: {avg_waiting_time:.2f} ms")
print(f"CPU Utilization: {cpu_utilization:.2f}%")
print(f"Throughput: {throughput:.2f} processes/ms")
